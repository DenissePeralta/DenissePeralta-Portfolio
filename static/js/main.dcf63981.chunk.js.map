{"version":3,"sources":["images/dpbPhoto3.png","images/dpbName.png","images/dpbRole.png","images/aboutMe.png","images/dpbRoleEsp.png","images/acercaDeMi.png","components/Intro.js","components/MyInfo.js","components/HomePortfolio.js","components/IntroSpanish.js","components/MyInfoSpanish.js","components/HomePortfolioSpanish.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Intro","className","to","src","photoDen","alt","nameDen","roleDen","MyInfo","aboutMe","HomePortfolio","IntroSpanish","MyInfoSpanish","acercaDeMi","HomePortfolioSpa","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sJAAAA,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,sBCA3CD,EAAOC,QAAU,IAA0B,qC,kBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,uOCkB5BC,MAXf,WACE,OACE,6BAASC,UAAU,gBACjB,uBAAGA,UAAU,kBAAiB,kBAAC,IAAD,CAAMC,GAAG,0BAAuBD,UAAU,SAA1C,oBAC9B,yBAAKE,IAAKC,IAAUC,IAAI,UAAUJ,UAAU,aAC5C,yBAAKE,IAAKG,IAASD,IAAI,eAAeJ,UAAU,YAChD,yBAAKE,IAAKI,IAAQF,IAAI,eAAeJ,UAAU,c,iBCApCO,EATF,WACX,OACI,6BAASP,UAAU,UACf,yBAAKE,IAAKM,IAASJ,IAAI,WAAWJ,UAAU,eAC5C,iECKGS,EATO,WACpB,OACE,iCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,iBCUSC,MAXf,WACE,OACE,6BAASV,UAAU,mBACf,uBAAGA,UAAU,kBAAiB,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,SAAvB,yBAC9B,yBAAKE,IAAKC,IAAUC,IAAI,UAAUJ,UAAU,aAC5C,yBAAKE,IAAKG,IAASD,IAAI,eAAeJ,UAAU,YAChD,yBAAKE,IAAKI,IAAQF,IAAI,eAAeJ,UAAU,c,iBCDtCW,EARK,WAClB,OACI,6BAASX,UAAU,UACf,yBAAKE,IAAKU,IAAYR,IAAI,eAAeJ,UAAU,kBCMhDa,EATU,WACvB,OACE,iCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,MCOSC,MATf,WACE,OACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,0BAAuBC,UAAWJ,MCExCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dcf63981.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dpbPhoto3.1f8db121.png\";","module.exports = __webpack_public_path__ + \"static/media/dpbName.af68754f.png\";","module.exports = __webpack_public_path__ + \"static/media/dpbRole.2ca53ab2.png\";","module.exports = __webpack_public_path__ + \"static/media/aboutMe.d51a7797.png\";","module.exports = __webpack_public_path__ + \"static/media/dpbRoleEsp.3d04c380.png\";","module.exports = __webpack_public_path__ + \"static/media/acercaDeMi.969a4fae.png\";","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport './componentsStyle.css';\r\nimport photoDen from '../images/dpbPhoto3.png';\r\nimport nameDen from '../images/dpbName.png';\r\nimport roleDen from '../images/dpbRole.png';\r\n\r\nfunction Intro() {\r\n  return (\r\n    <section className=\"introduction\">\r\n      <p className=\"changeLanguage\"><Link to=\"/portafolioEnEspañol\" className=\"links\">Spanish Version</Link></p>\r\n      <img src={photoDen} alt=\"Denisse\" className=\"denPhoto\"></img>\r\n      <img src={nameDen} alt=\"Denisse name\" className=\"denName\"></img>\r\n      <img src={roleDen}alt=\"Denisse role\" className=\"denRole\"></img>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Intro;","import React from 'react';\r\nimport './componentsStyle.css';\r\nimport aboutMe from '../images/aboutMe.png';\r\n\r\nconst MyInfo = () => {\r\n    return (\r\n        <section className=\"myInfo\">\r\n            <img src={aboutMe} alt=\"About me\" className=\"aboutImage\"></img>\r\n            <p>I was born in Veracruz, Mexico. </p>\r\n        </section>\r\n    );\r\n  }\r\n  \r\n  export default MyInfo;\r\n  ","import React from 'react';\r\nimport Intro from './Intro.js';\r\nimport MyInfo from './MyInfo.js';\r\n\r\nconst HomePortfolio = () => {\r\n  return (\r\n    <section>\r\n      <Intro />\r\n      <MyInfo />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default HomePortfolio;\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport './componentsStyle.css';\r\nimport photoDen from '../images/dpbPhoto3.png';\r\nimport nameDen from '../images/dpbName.png';\r\nimport roleDen from '../images/dpbRoleEsp.png';\r\n\r\nfunction IntroSpanish() {\r\n  return (\r\n    <section className=\"introductionSpa\">\r\n        <p className=\"changeLanguage\"><Link to=\"/\" className=\"links\">Versión Inglés</Link></p>\r\n        <img src={photoDen} alt=\"Denisse\" className=\"denPhoto\"></img>\r\n        <img src={nameDen} alt=\"Denisse name\" className=\"denName\"></img>\r\n        <img src={roleDen}alt=\"Denisse role\" className=\"denRole\"></img>\r\n    </section> \r\n  );\r\n}\r\n\r\nexport default IntroSpanish;","import React from 'react';\r\nimport './componentsStyle.css';\r\nimport acercaDeMi from '../images/acercaDeMi.png';\r\n\r\nconst MyInfoSpanish = () => {\r\n    return (\r\n        <section className=\"myInfo\">\r\n            <img src={acercaDeMi} alt=\"Acerca de mi\" className=\"acercaImage\"></img>\r\n        </section>\r\n    );\r\n  }\r\n  \r\n  export default MyInfoSpanish;","import React from 'react';\r\nimport IntroSpanish from './IntroSpanish.js';\r\nimport MyInfoSpanish from './MyInfoSpanish.js';\r\n\r\nconst HomePortfolioSpa = () => {\r\n  return (\r\n    <section>\r\n      <IntroSpanish />\r\n      <MyInfoSpanish />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default HomePortfolioSpa;\r\n","import React from 'react';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport HomePortfolio from './components/HomePortfolio.js';\nimport HomePortfolioSpa from './components/HomePortfolioSpanish.js';\nimport './App.css';\n\nfunction App() {\n  return (\n      <Router>\n        <Route exact path=\"/\" component={HomePortfolio} />\n        <Route exact path=\"/portafolioEnEspañol\" component={HomePortfolioSpa} />\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}